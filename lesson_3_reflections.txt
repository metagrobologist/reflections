When would you want to use a remote repository rather than keeping all your work local?

When you are working on different computers and different locations, perhaps even public places.
When working with different persons on the same code.
When making your work public (open source)
As backup (private of public)

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

You might want to keep a working version or certain features
You might not want to lose your changes

Describe the differences between forks, clones, and branches. When would you use one instead of another?

a branch is a different version of your code with its own commits
a clone is a local copy of a all commits of a (local or remote) repository  
a fork is a feature of GitHub, which looks like a clone but then only on the servers of GitHub.
One would use a branch instead of clone or fork when working locally on a new feature or try out a change.
One would use a clone instead of a branch or fork when wanting to work on code of a local or remote repository without adding to that repository but on a local copy
One would use a fork instead of a clone when one wants to work on code from a remote repository on GitHub where one can not write to it.

What is the benefit of having a copy of the last known state of the remote stored locally?

Well, you are up-to-date even when no internet available; so working on the plane after that would be fine :)

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

Without i would prefer to collaborate working in the same room, using manual diff's to be able to merge. However i think a tool like svn or git is much better suited for collaboration, and easier; since it automates most of the grunt work of merging. Also with pull requests there is a way to control better which changes go in the master or stable branch.


When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

As said before; a different branch can contain experimental code or different features of the 'main' master branch. It is also a way to keep master clean and lean

